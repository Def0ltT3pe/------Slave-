# ssh_handler.py
import paramiko
import sys
import time
import os

class FixedSSHHandler:
    def __init__(self):
        self.client = None
        self.is_connected = False
    
    def connect(self, host: str, username: str, password: str, port: int = 22) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSH —Å–µ—Ä–≤–µ—Ä—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            self.client = paramiko.SSHClient()
            self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            self.client.connect(
                hostname=host,
                username=username,
                password=password,
                port=port
            )
            
            self.is_connected = True
            print(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {username}@{host}:{port}")
            return True
            
        except paramiko.AuthenticationException:
            print("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
        except paramiko.SSHException as e:
            print(f"SSH –æ—à–∏–±–∫–∞: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    def execute_command(self, command: str) -> dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        if not self.is_connected:
            return {"error": "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É"}
        
        try:
            stdin, stdout, stderr = self.client.exec_command(command)
            exit_status = stdout.channel.recv_exit_status()
            output = stdout.read().decode('utf-8', errors='ignore')
            error = stderr.read().decode('utf-8', errors='ignore')
            
            return {
                "output": output,
                "error": error,
                "exit_status": exit_status,
                "command": command
            }
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"}
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.client:
            self.client.close()
        self.is_connected = False
        print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

def get_open_ports(ip: str) -> list:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
    (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
    """
    # –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ SSH –ø–æ—Ä—Ç—ã
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
    return [22, 80, 443, 8080]  # –ü—Ä–∏–º–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤

def ssh_connect_and_scan(ip: str, login: str, password: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ SSH –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
    open_ports = get_open_ports(ip)
    
    print(f"\n–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print(f"IP: {ip}")
    print(f"–õ–æ–≥–∏–Ω: {login}")
    print(f"–ü–∞—Ä–æ–ª—å: {password}")
    print(f"–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {open_ports}")
    
    # –°–æ–∑–¥–∞–µ–º SSH —Ö–µ–Ω–¥–ª–µ—Ä
    ssh_handler = FixedSSHHandler()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É SSH –ø–æ—Ä—Ç—É (22)
    if ssh_handler.connect(ip, login, password, 22):
        print("\n–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        commands = [
            "uname -a",
            "whoami",
            "pwd",
            "ls -la",
            "cat /etc/os-release || lsb_release -a || uname -o"
        ]
        
        for cmd in commands:
            print(f"\n--- –í—ã–ø–æ–ª–Ω—è–µ–º: {cmd} ---")
            result = ssh_handler.execute_command(cmd)
            
            if result.get("output"):
                print(result["output"])
            if result.get("error"):
                print(f"–û—à–∏–±–∫–∞: {result['error']}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        response = input("\n–ü–µ—Ä–µ–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º? (y/n): ").strip().lower()
        if response == 'y':
            start_interactive_session(ssh_handler)
    
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ SSH")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    ssh_handler.disconnect()

def start_interactive_session(ssh_handler):
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π SSH —Å–µ—Å—Å–∏–∏"""
    print("\nüéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è SSH —Å–µ—Å—Å–∏—è")
    print("–ö–æ–º–∞–Ω–¥—ã: help - —Å–ø—Ä–∞–≤–∫–∞, exit - –≤—ã—Ö–æ–¥")
    print("-" * 50)
    
    while ssh_handler.is_connected:
        try:
            command = input("\nssh> ").strip()
            
            if not command:
                continue
            
            if command.lower() == 'exit':
                break
            elif command.lower() == 'help':
                print_help()
            else:
                result = ssh_handler.execute_command(command)
                print_result(result)
                
        except KeyboardInterrupt:
            print("\n–°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
            break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")

def print_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –õ—é–±—ã–µ Linux –∫–æ–º–∞–Ω–¥—ã: ls, cd, pwd, cat, grep, find, ps, etc.
‚Ä¢ help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ exit - –≤—ã–π—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏

–ü—Ä–∏–º–µ—Ä—ã:
  ls -la /home
  cat /etc/passwd
  ps aux | grep ssh
  df -h
  free -m
  netstat -tuln
    """
    print(help_text)

def print_result(result: dict):
    """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
    if "error" in result:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    else:
        if result.get("output"):
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç:")
            print(result["output"].strip())
        if result.get("error"):
            print("–û—à–∏–±–∫–∏:")
            print(result["error"].strip())
        if result.get("exit_status") != 0:
            print(f"–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {result['exit_status']}")
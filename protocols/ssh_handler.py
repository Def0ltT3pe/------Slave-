import paramiko
import sys
import time
import os

class FixedSSHHandler:
    def __init__(self):
        self.client = None
        self.is_connected = False
    
    def connect(self, host: str, username: str, password: str, port: int = 22) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SSH —Å–µ—Ä–≤–µ—Ä—É (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            self.client = paramiko.SSHClient()
            self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í - –ø–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            self.client.connect(
                hostname=host,      # —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º hostname
                username=username,  # —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º username  
                password=password,  # —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º password
                port=port           # —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º port
            )
            
            self.is_connected = True
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {username}@{host}:{port}")
            return True
            
        except paramiko.AuthenticationException:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å")
        except paramiko.SSHException as e:
            print(f"‚ùå SSH –æ—à–∏–±–∫–∞: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    def execute_command(self, command: str) -> dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        if not self.is_connected:
            return {"error": "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É"}
        
        try:
            stdin, stdout, stderr = self.client.exec_command(command)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            exit_status = stdout.channel.recv_exit_status()
            output = stdout.read().decode('utf-8', errors='ignore')
            error = stderr.read().decode('utf-8', errors='ignore')
            
            return {
                "output": output,
                "error": error,
                "exit_status": exit_status,
                "command": command
            }
            
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"}
    
    def interactive_session(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è"""
        if not self.is_connected:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        print("\nüéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è SSH —Å–µ—Å—Å–∏—è")
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("  help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
        print("  exit - –≤—ã–π—Ç–∏")
        print("  download <remote> <local> - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª")
        print("  upload <local> <remote> - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")
        print("-" * 50)
        
        while self.is_connected:
            try:
                command = input("\nssh> ").strip()
                
                if not command:
                    continue
                
                if command.lower() == 'exit':
                    break
                elif command.lower() == 'help':
                    self.show_help()
                elif command.lower().startswith('download '):
                    self.handle_download(command)
                elif command.lower().startswith('upload '):
                    self.handle_upload(command)
                else:
                    result = self.execute_command(command)
                    self.print_result(result)
                    
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ –õ—é–±—ã–µ Linux –∫–æ–º–∞–Ω–¥—ã: ls, cd, pwd, cat, grep, find, etc.
‚Ä¢ help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
‚Ä¢ exit - –≤—ã–π—Ç–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
‚Ä¢ download <remote_path> <local_path> - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
‚Ä¢ upload <local_path> <remote_path> - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª

–ü—Ä–∏–º–µ—Ä—ã:
  ls -la /home
  cat /etc/passwd
  ps aux | grep ssh
  download /var/log/syslog ./syslog.txt
  upload script.sh /tmp/script.sh
        """
        print(help_text)
    
    def handle_download(self, command: str):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            parts = command.split()
            if len(parts) != 3:
                print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: download <remote_path> <local_path>")
                return
            
            remote_path, local_path = parts[1], parts[2]
            sftp = self.client.open_sftp()
            sftp.get(remote_path, local_path)
            sftp.close()
            print(f"‚úÖ –§–∞–π–ª {remote_path} —Å–∫–∞—á–∞–Ω –∫–∞–∫ {local_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
    
    def handle_upload(self, command: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            parts = command.split()
            if len(parts) != 3:
                print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: upload <local_path> <remote_path>")
                return
            
            local_path, remote_path = parts[1], parts[2]
            if not os.path.exists(local_path):
                print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}")
                return
            
            sftp = self.client.open_sftp()
            sftp.put(local_path, remote_path)
            sftp.close()
            print(f"‚úÖ –§–∞–π–ª {local_path} –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ {remote_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    def print_result(self, result: dict):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        else:
            if result.get("output"):
                print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                print(result["output"].strip())
            if result.get("error"):
                print("‚ö†Ô∏è  –û—à–∏–±–∫–∏:")
                print(result["error"].strip())
            if result.get("exit_status") != 0:
                print(f"üîö –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {result['exit_status']}")
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.client:
            self.client.close()
        self.is_connected = False
        print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

# –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class SimpleSSHHandler:
    def __init__(self):
        self.client = None
    
    def connect(self, host: str, username: str, password: str, port: int = 22) -> bool:
        """–ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            self.client = paramiko.SSHClient()
            self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–´–ó–û–í
            self.client.connect(
                hostname=host,
                username=username, 
                password=password,
                port=port
            )
            
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {host}:{port}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        stdin, stdout, stderr = self.client.exec_command('uname -a && whoami && pwd')
        output = stdout.read().decode()
        error = stderr.read().decode()
        
        print("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:")
        print(output)
        if error:
            print("–û—à–∏–±–∫–∏:", error)
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ"""
        if self.client:
            self.client.close()
        print("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
def get_connection_info():
    """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("=== SSH –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ===")
    
    host = input("–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –∏–ª–∏ hostname: ").strip()
    if not host:
        host = "localhost"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    username = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").strip()
    if not username:
        username = "root"  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()
    
    port_str = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 22): ").strip()
    port = int(port_str) if port_str else 22
    
    return host, username, password, port

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π SSH –∫–ª–∏–µ–Ω—Ç")
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    host, username, password, port = get_connection_info()
    
    if choice == "1":
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        ssh = SimpleSSHHandler()
        if ssh.connect(host, username, password, port):
            ssh.test_connection()
            ssh.disconnect()
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        ssh = FixedSSHHandler()
        if ssh.connect(host, username, password, port):
            ssh.interactive_session()
            ssh.disconnect()

if __name__ == "__main__":
    main()